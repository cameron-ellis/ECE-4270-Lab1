	addi sp, sp, -80	#make space in sp
	addi x5, x0, 5		#store entire array to stack
	sw x5, 0(sp)
	addi x5, x0, 3
	sw x5, 8(sp)
	addi x5, x0, 6
	sw x5, 16(sp)		
	addi x5, x0, 8
	sw x5, 24(sp)
	addi x5, x0, 9
	sw x5, 32(sp)
	addi x5, x0, 1
	sw x5, 40(sp)
	addi x5, x0, 4
	sw x5, 48(sp)
	addi x5, x0, 7
	sw x5, 56(sp)
	addi x5, x0, 2
	sw x5, 64(sp)
	addi x5, x0, 10
	sw x5, 72(sp)
	addi x6, x0, 10		#set size
	addi x7, x0, 0		#set i
	addi x9, x6, -1		#set size-1 for inner loop
outer:
	bge x7, x6, exit	#outer loop
	addi x8, x0, 0		#set j
	addi x10, sp, 0		#get memory addr of array start
inner:
	bge x8, x9, endin	#inner loop
	lw x13, 0(x10)		#load 2 elements
	lw x14, 8(x10)
	bge x14, x13, postinner	#if sorted, end loop
	sw x14, 0(x10)			#if not sorted, swap
	sw x13, 8(x10)
postinner:
	addi x10, x10, 8	#increment addr for next elements
	addi x8, x8, 1		#j++
	beq x0, x0, inner	#go to inner loop start
endin:
	addi x7, x7, 1		#i++
	beq x0, x0, outer	#go to outer loop start
exit:
	sp, sp, 80			#fix stack pointer when done, idk if we''re actually supposed to do this